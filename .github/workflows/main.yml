name: Main
on:
  push:
    branches: [ main ]
jobs:

  update:
    name: checkout
    runs-on: ubuntu-latest
    environment: 
      name: staging
    steps:
    - name: Updating repository
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd hml/${{ github.event.repository.name }}
          printf "\n\n updating repository....\n\n "
          git reset --hard origin/main
          git pull origin main

          echo "$(docker inspect --format="{{.Image}}" $(docker ps -a --format "table {{.Names}}" | grep containerhml ))" > old_image_id.txt

          echo "old image: $(head -1 old_image_id.txt)"
        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  build:
    name: build
    needs: update
    runs-on: ubuntu-latest
    environment: 
      name: staging
    steps:
    - name: building image
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd hml/${{ github.event.repository.name }}

          printf "\n\n generating docker image....\n\n "
          docker build -t ${{ github.event.repository.name }}:hml .

          echo "$(docker images --filter "reference=${{ github.event.repository.name }}:hml" --format {{.ID}})" > new_image_id.txt

          echo "new image: $(head -1 new_image_id.txt)"
        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  deploy-hml:
    name: deploy-hml
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: http://${{ vars.HOST }}:${{ vars.EXTERNAL_APP_PORT }}/
    steps:
    - name: starting server
      uses: fifsky/ssh-action@master
      with:
        command: |
          docker stop containerhml
          docker rm containerhml

          cd hml/${{ github.event.repository.name }}
          printf "\n\n starting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
          docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerhml --restart=always $(head -1 new_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}
    - name: restart last container
      uses: fifsky/ssh-action@master
      if: ${{ failure() }}
      with:
          command: |
            cd hml/${{ github.event.repository.name }}

            printf "\n\n restarting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
            docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerhml --restart=always $(head -1 old_image_id.txt)
            
            docker rmi $(head -1 new_image_id.txt)
            
          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}

    - name: clean images
      uses: fifsky/ssh-action@master
      if: ${{ success() }}
      with:
          command: |
            cd hml/${{ github.event.repository.name }}
            docker rmi $(head -1 old_image_id.txt)

          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}

  deploy-prd:
    name: deploy-prd
    needs: deploy-hml
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: http://${{ vars.HOST }}/
    steps:    
    - name: building image
      uses: fifsky/ssh-action@master
      with:
        command: |
          rm -rf ~/prd/${{ github.event.repository.name }}/
          cp -r ~/hml/${{ github.event.repository.name }} ~/prd/
          
          cd ~/prd/${{ github.event.repository.name }}
          echo "$(docker inspect --format="{{.Image}}" $(docker ps -a --format "table {{.Names}}" | grep containerprd ))" > old_image_id.txt
          echo "new image: $(head -1 old_image_id.txt)"

          printf "\n\n generating docker image....\n\n "
          cd ~/prd/${{ github.event.repository.name }}
          docker build -t ${{ github.event.repository.name }}:prd .

          echo "$(docker images --filter "reference=${{ github.event.repository.name }}:prd" --format {{.ID}})" > new_image_id.txt
          echo "new image: $(head -1 new_image_id.txt)"

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}     

    - name: starting server
      uses: fifsky/ssh-action@master
      with:
        command: |
          docker stop containerprd
          docker rm containerprd

          cd ~/prd/${{ github.event.repository.name }}
          
          printf "\n\n starting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
          docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerprd --restart=always $(head -1 new_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}    

    - name: restart last container
      uses: fifsky/ssh-action@master
      if: ${{ failure() }}
      with:
        command: |
          cd prd/${{ github.event.repository.name }}

          printf "\n\n restarting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
          docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerprd --restart=always $(head -1 old_image_id.txt)

          docker rmi $(head -1 new_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

    - name: clean images
      uses: fifsky/ssh-action@master
      if: ${{ success() }}
      with:
        command: |
          cd prd/${{ github.event.repository.name }}
          docker rmi $(head -1 old_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}
        