name: Main
on:
  push:
    branches: [ main ]
jobs:

  update:
    name: checkout
    runs-on: ubuntu-latest
    environment: 
      name: staging
    steps:
    - name: Updating repository
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd hml/${{ github.event.repository.name }}
          printf "\n\n updating repository....\n\n "
          git reset --hard origin/main
          git pull origin main

          echo "docker inspect --format='{{.Image}}' $(docker ps -a --format 'table {{.Names}}' | grep containerhml )" > old_image_id.txt

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  build:
    name: build
    needs: update
    runs-on: ubuntu-latest
    environment: 
      name: staging
    steps:
    - name: building image
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd hml/${{ github.event.repository.name }}

          printf "\n\n generating docker image....\n\n "
          docker build -t ${{ github.event.repository.name }} .

          echo "docker inspect --format='{{.Image}}' $(docker ps -a --format 'table {{.Names}}' | grep containerhml )" > new_image_id.txt

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  deploy-hml:
    name: deploy-hml
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: http://${{ vars.HOST }}:${{ vars.EXTERNAL_APP_PORT }}/
    steps:
    - name: starting server
      uses: fifsky/ssh-action@master
      with:
        command: |
          docker stop containerhml
          docker rm containerhml

          cd hml/${{ github.event.repository.name }}
          printf "\n\n starting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
          docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerhml --restart=always $(cat new_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  deploy-prd:
    name: deploy-prd
    needs: deploy-hml
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: http://${{ vars.HOST }}/
    steps:
    - name: starting server
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd prd/${{ github.event.repository.name }}
          echo "docker inspect --format='{{.Image}}' $(docker ps -a --format 'table {{.Names}}' | grep containerprd )" > old_image_id.txt

          docker stop containerprd
          docker rm containerprd
          
          cd ~/hml/${{ github.event.repository.name }}
          cp new_image_id.txt ~/prd/

          cd ~prd/${{ github.event.repository.name }}
          printf "\n\n starting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
          docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerprd --restart=always $(cat new_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}        

  finally-prd:
    name: finally-prd
    runs-on: ubuntu-latest
    needs: [deploy-prd]
    environment: 
      name: production
    steps:
      - name: restart last container
        uses: fifsky/ssh-action@master

        if: ${{ failure() }}
        with:
          command: |
            cd prd/${{ github.event.repository.name }}

            printf "\n\n restarting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
            docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerprd --restart=always $(cat old_image_id.txt)

            docker rmi $(cat new_image_id.txt)

          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}

      - name: clean images
        uses: fifsky/ssh-action@master

        if: ${{ success() }}
        with:
          command: |
            cd hml/${{ github.event.repository.name }}
            docker rmi $(cat old_image_id.txt)

          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}

  finally-hml:
    name: finally-hml
    runs-on: ubuntu-latest
    needs: [deploy-hml]
    environment: 
      name: staging
    steps:
      - name: restart last container
        uses: fifsky/ssh-action@master

        if: ${{ failure() }}
        with:
          command: |
            cd hml/${{ github.event.repository.name }}

            printf "\n\n restarting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
            docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerhml --restart=always $(cat old_image_id.txt)
            
            docker rmi $(cat new_image_id.txt)
            
          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}

      - name: clean images
        uses: fifsky/ssh-action@master

        if: ${{ success() }}
        with:
          command: |
            cd hml/${{ github.event.repository.name }}
            docker rmi $(cat old_image_id.txt)

          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}