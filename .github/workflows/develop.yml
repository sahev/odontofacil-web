name: Develop
on:
  push:
    branches: [ develop ]
jobs:

  update:
    name: checkout
    runs-on: ubuntu-latest
    environment: 
      name: development
    steps:
    - name: Updating repository
      id: checkout
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd dev/${{ github.event.repository.name }}
          printf "\n\n updating repository....\n\n "
          git reset --hard origin/develop
          git pull origin develop

          echo "$(docker inspect --format="{{.Image}}" $(docker ps -a --format "table {{.Names}}" | grep containerdev ))" > old_image_id.txt

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  build:
    name: build
    needs: update
    runs-on: ubuntu-latest
    environment: 
      name: development
    steps:
    - name: building image
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd dev/${{ github.event.repository.name }}

          printf "\n\n generating docker image....\n\n "
          docker build -t ${{ github.event.repository.name }} .

          echo "$(docker inspect --format="{{.Image}}" $(docker ps -a --format "table {{.Names}}" | grep containerdev ))" > new_image_id.txt

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}

  deploy-dev:
    name: deploy-dev
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: development
      url: http://${{ vars.HOST }}:${{ vars.EXTERNAL_APP_PORT }}/
    steps:
    - name: starting server
      uses: fifsky/ssh-action@master
      with:
        command: |
          docker stop containerdev
          docker rm containerdev

          printf "\n\n starting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
          docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerdev --restart=always $(cat new_image_id.txt)

        host: ${{ vars.HOST }}
        user: ${{ vars.SSH_USER }}
        key: ${{ secrets.SECRET_KEY }}
        
  finally:
    name: finally
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    environment: 
      name: development
    steps:
      - name: restart last container
        uses: fifsky/ssh-action@master

        if: ${{ failure() }}
        with:
          command: |
            cd dev/${{ github.event.repository.name }}

            printf "\n\n restarting docker server on port ${{ vars.INTERNAL_APP_PORT }} ....\n\n "
            docker run -d -p ${{ vars.INTERNAL_APP_PORT }}:8080 --name containerdev --restart=always $(cat old_image_id.txt)

            docker rmi $(cat new_image_id.txt)
            
          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}

      - name: clean images
        uses: fifsky/ssh-action@master

        if: ${{ success() }}
        with:
          command: |
            cd dev/${{ github.event.repository.name }}
            docker rmi $(cat old_image_id.txt)

          host: ${{ vars.HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SECRET_KEY }}